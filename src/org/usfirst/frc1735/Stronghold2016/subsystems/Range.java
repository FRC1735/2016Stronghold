// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Stronghold2016.subsystems;

import org.usfirst.frc1735.Stronghold2016.Robot;
import org.usfirst.frc1735.Stronghold2016.RobotMap;
import org.usfirst.frc1735.Stronghold2016.commands.*;
import edu.wpi.first.wpilibj.AnalogInput;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Range extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogInput rangefinder = RobotMap.rangeRangefinder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new CalculateRange());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public double getRange() {
    	// Return the range, in feet, detected by the IR Rangefinder.
    	// The rangefinder is linear with respect to the inverse of the distance, per the datasheet.
    	// Based on the data points on that sheet, the derived equation is:
    	// y=mx+b, with two specific data points being 3.25'=1.3V and 16.4' = 2.5v (x = 1/d)
    	// This yields the following:		
    	// d = (4.8639)/(V-1), where d is distance and V is the voltage output of the unit.
    	
    	return (4.8639/(rangefinder.getAverageVoltage()-1.0));// might use .getAverageVoltage() if this is too noisy
    }
    
    public void displayRange() {
    	// display the range to console and to SmartDashboard.
    	double range = getRange();
    	SmartDashboard.putNumber("Range (ft)", range);
    	//Robot.dbgPrintln("Current Range: " + range); // only prints to console if master debug enabled
    }
}


// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Stronghold2016.subsystems;

import org.usfirst.frc1735.Stronghold2016.RobotMap;
import org.usfirst.frc1735.Stronghold2016.commands.*;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// MANUALLY added these to more easily get at the underlying objects.
	// Note that these lines are not auto-generated if you change the objects in RobotBuilder!
    private final SpeedController leftMotor = RobotMap.shooterLeftPIDLeftMotor;
    private final Encoder shootLeftEncoder = RobotMap.shooterLeftPIDShootLeftEncoder;
    private final SpeedController rightMotor = RobotMap.shooterRightPIDRightMotor;
    private final Encoder shootRightEncoder = RobotMap.shooterRightPIDShootRightEncoder;

// Add a constructor to set the sample rate
    public Shooter() {
    	// Based on this comment in the WPILIB documentation for encoders:
    	//   For sensing rate, particularly at high RPM, using 1x or 2x decoding and increasing the number
    	//   of samples to average may substantially help reduce jitter. 
    	// Set the (over)sample rate... once we know what to set it to!
    	// Need to find out what the default is before we change the value.
    	System.out.println("Default value of samplesToAverage for encoder is: " +
    			shootLeftEncoder.getSamplesToAverage());

    	//shootLeftEncoder.setSamplesToAverage(samplesToAverage);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void engageShooter(double magnitudeDirection) {
    	leftMotor.set(magnitudeDirection);
    	rightMotor.set(-magnitudeDirection);
    	}
    public void stop() {
    	leftMotor.set(0);
    	rightMotor.set(0);
    }
    // Note:  we expect the motors to return a full-speed rate of approximately 3600 RPM.
    // Use the printRPMs to see if that is true....
    // We may need to change the DistancePerPulse variable to get the proper output value.
    // From WPILIB documentation:
    //   Rate - The current rate of the counter in units/sec.
    //   It is calculated using the DistancePerPulse divided by the period.
    //   If the counter is stopped this value may return Inf or NaN, depending on language.
    //TODO:  WE may need to check for the Inf/NaN and handle it.
    
    public double getLeftRPM() {
    	return shootLeftEncoder.getRate();
    }
 
    public double getRightRPM() {
    	return shootRightEncoder.getRate();
    }
    public void printRPMs() {
    	System.out.println("Shooter RPMs:  Left= " + getLeftRPM() + ", Right= " + getRightRPM());
    }

    
 }


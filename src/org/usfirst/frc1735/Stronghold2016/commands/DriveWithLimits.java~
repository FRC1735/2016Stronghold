// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Stronghold2016.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc1735.Stronghold2016.RobotMap;
import org.usfirst.frc1735.Stronghold2016.Robot;

/**
 *
 */
public class DriveWithLimits extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_distanceLimit;
    private double m_timeLimit;
    private double m_magnitudeDirection;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveWithLimits(double distanceLimit, double timeLimit, double magnitudeDirection) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_distanceLimit = distanceLimit;
        m_timeLimit = timeLimit;
        m_magnitudeDirection = magnitudeDirection;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        //Set the timeout
        setTimeout(timeLimit);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	//Grab the current encoder distance as the starting point
    	m_leftStartDistance = RobotMap.driveTrainLeftMotorEncoder.getDistance();
    	m_rightStartDistance = RobotMap.driveTrainRightMotorEncoder.getDistance();

    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// Drive until we hit one of the limits.
    	// Time Limit handled by built-in library and handled in the isFinished() function
     	// Magnitude/direction may need compensation
    	//    But for now, just pass it along to go straight
    	double leftMagnitudeDirection  = m_magnitudeDirection;
    	double rightMagnitudeDirection = m_magnitudeDirection;
    		
    	// Distance limit handled in isFinished, but same data may be needed for tracking compensation
    	// (to go straight)
    	// TODO:  Add encoder/distance compensation here if needed
    	
    	//Finally, send the final motor magnitude and direction to the drivetrain:
    	Robot.driveTrain.tankDrive(leftMagnitudeDirection, rightMagnitudeDirection);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        boolean timedOut = isTimedOut(); // Check for timeout
        double currentLeftDistance = RobotMap.driveTrainLeftMotorEncoder.getDistance();
        double currentRightDistance = RobotMap.driveTrainRightMotorEncoder.getDistance();
        double leftTravel = Math.abs(currentLeftDistance - m_leftStartDistance);
        double rightTravel = Math.abs(currentRightDistance - m_rightStartDistance);
        //System.out.println("m_distanceLimit = " + m_distanceLimit);
        //System.out.println("R distance traveled is " + rightTravel + " and L distance traveled is " + leftTravel);
        boolean finished = (timedOut || (leftTravel > Math.abs(m_distanceLimit)) || (rightTravel > Math.abs(m_distanceLimit)));
 
        //System.out.println("isFinished returns status= " + finished);
        return finished;
        
        
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    // Member Variables
    double m_leftStartDistance;		// starting absolute distance from encoder
    double m_rightStartDistance;	// starting absolute distance from encoder
}

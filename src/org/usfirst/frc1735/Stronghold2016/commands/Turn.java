// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Stronghold2016.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc1735.Stronghold2016.Robot;
import org.usfirst.frc1735.Stronghold2016.subsystems.*;

/**
 *
 */
public class Turn extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public Turn(double degrees) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 
    	double magnitudeDirection = 0.6;
    	// Calculate the distance to turn based on degrees.
    	// Input arg assume POSITIVE degrees == clockwise rotation.
    	// if degrees is negative, invert it and change the sign of the motor magnitude instead--
    	// (The DrivewithLimits function doesn't handle negative distances.)
    	if (degrees < 0){
    		degrees = -degrees;
    		magnitudeDirection = -magnitudeDirection;
    	}
    	
    	// We have already determined the distance the wheel goes for 360 degrees;
    	// This, divided by 360, is distance per degree; multiply by desired number of degrees.
    	double turnDistance = Robot.driveTrain.m_wheelDistancePerRobotRevolution/360*degrees;
    	
    	// Now, call the DriveWithLimits command with that value.
    	addSequential(new DriveWithLimits(turnDistance, 3, magnitudeDirection, false, true)); // distance, time, mag, left, right
    } 
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.Stronghold2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1735.Stronghold2016.Robot;
import org.usfirst.frc1735.Stronghold2016.RobotMap;
import org.usfirst.frc1735.Stronghold2016.subsystems.Feeder;

/**
 *
 */
public class FeedBall extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_magnitudeDirection;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FeedBall(double magnitudeDirection) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_magnitudeDirection = magnitudeDirection;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.feeder);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	//Robot.dbgPrintln("FeedBall Function initialized!");
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// We only turn the motor on if any of these is true ('OR'):
    	// 1) The ball needs to be pulled in further (hasn't hit the BallReady limit switch), or
    	// 2) We are going in reverse to spit the ball out (in which case, we need to do this unconditionally
    	//    and ignore the limit switch), or
    	// 3) if the master sensor override button is pressed (meaning ignore the state of the switch
    	//    and run the motor unconditionally)
    	// We check the limit switch here in execute to prevent a new execution of the command
    	//    (e.g. the operator presses the trigger again) causing the motor to run for a brief time until
    	//    the isFinished sees the switch is already pressed.  Multiple trigger presses could conceivably
    	//    push the ball forward over time and cause a misfire.
    	if(!Robot.feeder.isBallReadyPressed() || Robot.feeder.isRvs(m_magnitudeDirection) || Robot.isSensorOvrd()) {
        	Robot.feeder.feedBall(m_magnitudeDirection);

    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return (!Robot.isSensorOvrd() && Robot.feeder.isBallReadyPressed()); // if pressed, this command should terminate.  Do not terminate if sensor override is set.
    	
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.feeder.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
